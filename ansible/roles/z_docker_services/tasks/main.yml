---
- name: ensure debian packages are installed
  become: 'yes'
  ansible.builtin.apt:
    name:
      - 'default-libmysqlclient-dev'
      - 'git'
      - 'libldap2-dev'
      - 'libmariadb-dev'
      - 'libpq-dev'
      - 'libsasl2-dev'
      - 'python3'
      - 'python3-mysqldb'
      - 'python3-pip'
      - 'rsync'
    state: 'present'
    update_cache: 'yes'
  when: ansible_os_family == 'Debian'

- name: ensure rhel packages are installed
  become: 'yes'
  ansible.builtin.yum:
    name:
      - 'fuse-overlayfs'
      - 'gcc'
      - 'git'
      - 'libpq-devel'
      - 'mysql-common'
      - 'mariadb'
      - 'mariadb-connector-c-devel'
      - 'openldap-devel'
      - 'python3.12'
      - 'python3.12-devel'
      - 'python3.12-pip'
      - 'python3.12-PyMySQL'
      - 'rsync'
    state: 'latest'
  when: ansible_os_family == 'RedHat'

- name: install python packages for managing docker
  ansible.builtin.pip:
    name:
      - 'docker'
      - 'mysqlclient'
      - 'psycopg2'
      - 'python-ldap'
      - 'pyyaml==6.0.2'
    executable: pip3.12
    extra_args: --user

    #TODO: move to proxmox101 setup - it's too late here
    #- name: change ssh port to 2222
    #  become: 'yes'
    #  ansible.builtin.lineinfile:
    #    dest: '/etc/ssh/sshd_config'
    #    regexp: '{{ item.regexp }}'
    #    line: '{{ item.line }}'
    #    state: 'present'
    #  with_items:
    #    - regexp: '^Port 2222$'
    #      line: 'Port 2222'
    #
    #- name: remove the 'Development tools' package group
    #  ansible.builtin.dnf:
    #    name: '@Development tools'
    #    state: absent
    #  when: ansible_os_family == 'RedHat'

- name: restart ssh
  become: 'yes'
  ansible.builtin.service:
    name: 'sshd'
    state: 'restarted'

- name: ensure services/ is absent
  become: yes
  ansible.builtin.file:
    path: '/home/ansible/docker/services'
    state: 'absent'

- name: ensure docker dir exists
  become: yes
  ansible.builtin.file:
    path: '/home/ansible/docker'
    state: 'directory'
    owner: ansible
    group: ansible
    mode: '0700'

- name: create symbolic link for data dir
  become: yes
  ansible.builtin.file:
    src: '/mnt/eagle/data/docker'
    dest: '/home/ansible/docker/data'
    state: 'link'
    owner: ansible
    group: ansible

#- name: copy local services/
#  ansible.builtin.copy:
#    src: ../services/
#    dest: '~/docker/services/'
#    owner: ansible
#    group: ansible
#    mode: '0644'

- name: synchronize local services/
  ansible.posix.synchronize:
    src: ../services/
    dest: '~/docker/services/'
    mode: 'push'

- name: get compose.yml files
  ansible.builtin.shell: ls -1 /home/ansible/docker/services/*/compose.yml | paste -sd ":" -
  register: compose_files

- name: copy templates/secrets files
  ansible.builtin.include_tasks: files.yml

- name: Run `docker-compose up` for postgres
  environment:
    COMPOSE_FILE: "{{ compose_files.stdout }}"
    COMPOSE_PROJECT_NAME: 'zah'
  community.docker.docker_compose_v2:
    project_src: '~/docker'
    remove_orphans: 'yes'
    state: 'present'
    recreate: 'always'
    check_files_existing: false
    services:
      - 'postgres'

- name: run postgres stuff
  ansible.builtin.include_tasks: postgres.yml
  vars:
    z_extensions:
      - db_name: '{{ immich.postgres.database }}'
        ext_name: 'vector'

    z_services:
      - db_name: '{{ atuin.db.database }}'
        username: '{{ atuin.db.username }}'
        password: '{{ atuin.db.password }}'
      - db_name: 'bitwarden'
        username: 'bitwarden'
        password: '{{ pg_bitwarden_password }}'
      - db_name: 'hedgedoc'
        username: 'hedgedoc'
        password: '{{ pg_hedgedoc_password }}'
      - db_name: '{{ keycloak.db.database }}'
        username: '{{ keycloak.db.username }}'
        password: '{{ keycloak.db.password }}'
      - db_name: '{{ healthchecks.db.database }}'
        username: '{{ healthchecks.db.username }}'
        password: '{{ healthchecks.db.password }}'
      - db_name: '{{ sheetable.db_name }}'
        username: '{{ sheetable.db_username }}'
        password: '{{ sheetable.db_password }}'
      - db_name: '{{ kanboard.db.name }}'
        username: '{{ kanboard.db.username }}'
        password: '{{ kanboard.db.password }}'
      - db_name: '{{ gitea.postgres.database }}'
        username: '{{ gitea.postgres.username }}'
        password: '{{ gitea.postgres.password }}'
      - db_name: '{{ goatcounter.postgres.database }}'
        username: '{{ goatcounter.postgres.username }}'
        password: '{{ goatcounter.postgres.password }}'
      - db_name: '{{ keycloak25.db.database }}'
        username: '{{ keycloak25.db.username }}'
        password: '{{ keycloak25.db.password }}'
      - db_name: '{{ immich.postgres.database }}'
        username: '{{ immich.postgres.username }}'
        password: '{{ immich.postgres.password }}'
      - db_name: '{{ memos.db.database }}'
        username: '{{ memos.db.username }}'
        password: '{{ memos.db.password }}'
      - db_name: '{{ huginn.db.database }}'
        username: '{{ huginn.db.username }}'
        password: '{{ huginn.db.password }}'
      - db_name: '{{ romm.db.database }}'
        username: '{{ romm.db.username }}'
        password: '{{ romm.db.password }}'
      - db_name: '{{ manyfold.db.database }}'
        username: '{{ manyfold.db.username }}'
        password: '{{ manyfold.db.password }}'
      - db_name: '{{ monicahq.db.database }}'
        username: '{{ monicahq.db.username }}'
        password: '{{ monicahq.db.password }}'

- name: Run `docker-compose up` for mariadb
  environment:
    COMPOSE_FILE: "{{ compose_files.stdout }}"
    COMPOSE_PROJECT_NAME: 'zah'
  community.docker.docker_compose_v2:
    project_src: '~/docker'
    remove_orphans: 'yes'
    state: 'present'
    recreate: 'always'
    check_files_existing: false
    services:
      - 'mariadb'

- name: run mariadb stuff
  ansible.builtin.include_tasks: mariadb.yml
  vars:
    z_services:
      - db_name: '{{ romm.db.database }}'
        username: '{{ romm.db.username }}'
        password: '{{ romm.db.password }}'

- name: Run `docker-compose up` for openldap
  environment:
    COMPOSE_FILE: "{{ compose_files.stdout }}"
    COMPOSE_PROJECT_NAME: 'zah'
  community.docker.docker_compose_v2:
    project_src: '~/docker'
    remove_orphans: 'yes'
    state: 'present'
    recreate: 'always'
    check_files_existing: false
    services:
      - 'openldap'

- name: run openldap stuff
  ansible.builtin.include_tasks: openldap.yml

- name: Run `docker-compose up`
  environment:
    COMPOSE_FILE: "{{ compose_files.stdout }}"
    COMPOSE_PROJECT_NAME: 'zah'
  community.docker.docker_compose_v2:
    project_src: '~/docker'
    remove_orphans: 'yes'
    state: 'present'
    recreate: 'auto'
    check_files_existing: false
    services:
      - 'atuin'
      - 'baikal'
      - 'eas'
      - 'gitea'
      - 'goatcounter'
      - 'healthchecks'
      - 'hedgedoc'
      - 'homeassistant'
      - 'homebox'
      - 'huginn'
      - 'keycloak'
      - 'keycloak25'
      - 'komga'
      - 'lam'
      - 'mariadb'
      - 'memcached'
      - 'memos'
      - 'navidrome'
      - 'openldap'
      - 'postgres'
      - 'redis'
      - 'syncthing'
      - 'traefik'
      - 'unifi-controller'
      - 'vaultwarden'
      ## sites
      - 'com-andrewzah'
      - 'com-homegrownbinaries'
      - 'org-scfgc'
      - 'online-worldwarrior'

- name: Prune containers older than 24h
  community.docker.docker_prune:
    containers: true
    containers_filters:
      until: 24h

# todo: mount data dir from nfs
